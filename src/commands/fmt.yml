description: |
  Run `terraform fmt -check` to test if the code is formatted.

  Requirements
  * bash
  * terraform
  * gomplate
  * github-comment
parameters:
  dir:
    type: string
    default: "."
    description: |
      The relative path from the workspace root directory to Terraform configuration root directory.
      In the directory, `terraform fmt -check` is executed.
steps:
  - run:
      name: terraform fmt -check
      shell: /bin/bash -eu -o pipefail
      command: |
        echo_command_result_template() {
          local tempfile; tempfile=$(mktemp)
          echo "{{ .Env.HEADER }}" > $tempfile
          echo "" >> $tempfile
          echo "\`\`\`" >> $tempfile
          echo "$ {{ .Env.COMMAND }}" >> $tempfile
          echo "\`\`\`" >> $tempfile
          echo "" >> $tempfile
          echo "<details>" >> $tempfile
          echo "<summary>Command Output</summary>" >> $tempfile
          echo "" >> $tempfile
          echo "\`\`\`" >> $tempfile
          echo "{{ .Env.OUTPUT }}" >> $tempfile
          echo "\`\`\`" >> $tempfile
          echo "" >> $tempfile
          echo "</details>" >> $tempfile
          cat $tempfile
          rm $tempfile
        }
        echo_error() {
          COLOR_1="\e[31;1m"
          COLOR_OFF="\e[m"
          echo -e "${COLOR_1}$*${COLOR_OFF}" >&2
        }
        
        cd << parameters.dir >>
        if ! terraform fmt -check > /dev/null 2>&1; then
          echo_error "Please run 'terraform fmt'"
          terraform fmt -diff -write=false
          if [ -n "${CIRCLE_PULL_REQUEST:-""}" ]; then
            echo_command_result_template |
              HEADER=":x: [Job Link]($CIRCLE_BUILD_URL) [<< parameters.dir >>] Please run 'terraform fmt'" \
              COMMAND="terraform fmt -diff -write=false" \
              OUTPUT=$(terraform fmt -diff -write=false -no-color) \
              gomplate | github-comment
          fi
          exit 1
        fi
