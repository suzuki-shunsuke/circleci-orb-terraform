description: |
  Run `terraform apply` and add a comment to the pull request or Git commit.
  Requirements
  * bash
  * tfnotify
  * terraform
parameters:
  apply_options:
    type: string
    default: ""
    description: |
      The options of `terraform apply` command. The option `-auto-approve` is set automatically.
      For example, `-refresh=false -parallelism=20`.
  checkout_dir:
    type: string
    default: "."
    description: |
      The relative path from the working directory to the directory where the repository is checkouted.
  result_dir:
    type: string
    default: .ci/results
    description: |
      The relative path from the working directory to the directory where the result of `test` command is written.
steps:
  - run:
      name: terraform apply
      # requirement: bash
      shell: /bin/bash -eu -o pipefail
      command: |
        root_dir=$PWD
        checkout_dir=$root_dir/<< parameters.checkout_dir >>
        for changed_file in $(find << parameters.result_dir >> -name changed.txt); do
          service_env_dir=$(dirname ${changed_file##<< parameters.result_dir >>})
          cd $checkout_dir/$service_env_dir

          applyfile=$root_dir/<< parameters.result_dir >>/$service_env_dir/apply.txt

          terraform init

          set +o errexit
          terraform apply -auto-approve << parameters.apply_options >> > $applyfile
          code="$?"
          set -e

          cd $checkout_dir
          title=":white_check_mark: [$service_env_dir] terraform apply is succeeded"
          if [ $code -ne 0 ]; then
            title=":x: [$service_env_dir] terraform apply is failed"
          fi
          # requirement: tfnotify
          cat $applyfile | tfnotify apply --title $title
          if [ $code -ne 0 ]; then
            exit $code
          fi
        done
